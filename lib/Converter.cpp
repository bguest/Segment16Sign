#include "Converter.h"

uint16_t binarySegsForChar(char character){
  uint16_t rtn = 0xFFFF;
  switch(character){
    case ' ':
            //0123456789012345
      rtn = 0b0000000000000000; break;
    case '0':
            //0123456789012345
      rtn = 0b1111111111000000; break;
    case '1':
            //0123456789012345
      rtn = 0b0011000000001000; break;
    case '2':
            //0123456789012345
      rtn = 0b1110111000000011; break;
    case '3':
            //0123456789012345
      rtn = 0b1111110000000001; break;
    case '4':
            //0123456789012345
      rtn = 0b0011000100000011; break;
    case '5':
            //0123456789012345
      rtn = 0b1100110101000010; break;
    case '6':
            //0123456789012345
      rtn = 0b1001111100000011; break;
    case '7':
            //0123456789012345
      rtn = 0b1111000000000000; break;
    case '8':
            //0123456789012345
      rtn = 0b1111111100000011; break;
    case '9':
            //0123456789012345
      rtn = 0b1111100100000011; break;
    case 'a': case 'A':
            //0123456789012345
      rtn = 0b1111001100000011; break;
    case 'b': case 'B':
            //0123456789012345
      rtn = 0b1101111100001011; break;
    case 'c': case 'C':
            //0123456789012345
      rtn = 0b1100111100000000; break;
    case 'd': case 'D':
            //0123456789012345
      rtn = 0b1111110000110000; break;
    case 'e': case 'E':
            //0123456789012345
      rtn = 0b1100111100000010; break;
    case 'f': case 'F':
            //0123456789012345
      rtn = 0b1100001100000010; break;
    case 'g': case 'G':
            //0123456789012345
      rtn = 0b1101111100000001; break;
    case 'h': case 'H':
            //0123456789012345
      rtn = 0b0011001100000011; break;
    case 'i': case 'I':
            //0123456789012345
      rtn = 0b1100110000110000; break;
    case 'j': case 'J':
            //0123456789012345
      rtn = 0b0011111000000000; break;
    case 'k': case 'K':
            //0123456789012345
      rtn = 0b0000001101001010; break;
    case 'l': case 'L':
            //0123456789012345
      rtn = 0b0000111100000000; break;
    case 'm': case 'M':
            //0123456789012345
      rtn = 0b0011001110001000; break;
    case 'n': case 'N':
            //0123456789012345
      rtn = 0b0011001111000000; break;
    case 'o': case 'O':
            //0123456789012345
      rtn = 0b1111111100000000; break;
    case 'p': case 'P':
            //0123456789012345
      rtn = 0b1110001100000011; break;
    case 'q': case 'Q':
            //0123456789012345
      rtn = 0b1111111101000000; break;
    case 'r': case 'R':
            //0123456789012345
      rtn = 0b1110001101000011; break;
    case 's': case 'S':
            //0123456789012345
      rtn = 0b1101110100000011; break;
    case 't': case 'T':
            //0123456789012345
      rtn = 0b1100000000110000; break;
    case 'u': case 'U':
            //0123456789012345
      rtn = 0b0011111100000000; break;
    case 'v': case 'V':
            //0123456789012345
      rtn = 0b0000001100001100; break;
    case 'w': case 'W':
            //0123456789012345
      rtn = 0b0011001101000100; break;
    case 'x': case 'X':
            //0123456789012345
      rtn = 0b0000000011001100; break;
    case 'y': case 'Y':
            //0123456789012345
      rtn = 0b0010000100100011; break;
    case 'z': case 'Z':
            //0123456789012345
      rtn = 0b1100110000001100; break;
    case '~':
            //0123456789012345
      rtn = 0b0010001000000011; break;
    case '.':
            //0123456789012345
      rtn = 0b0000011000100010; break;
    case '!':
            //0123456789012345
      rtn = 0b0011000000000000; break;
    case '|':
            //0123456789012345
      rtn = 0b0000001100000000; break;
    case '"':
            //0123456789012345
      rtn = 0b0100000000010000; break;
    case '$':
            //0123456789012345
      rtn = 0b1101110100110011; break;
    case '%':
            //0123456789012345
      rtn = 0b1001100100111111; break;
    case '\'':
            //0123456789012345
      rtn = 0b0000000000001000; break;
    case '(':
            //0123456789012345
      rtn = 0b0000000001001000; break;
    case ')':
            //0123456789012345
      rtn = 0b0000000010000100; break;
    case '*':
            //0123456789012345
      rtn = 0b0000000011111111; break;
    case '+':
            //0123456789012345
      rtn = 0b0000000000110011; break;
    case '-':
            //0123456789012345
      rtn = 0b0000000000000011; break;
    case '/':
            //0123456789012345
      rtn = 0b0000000000001100; break;
    case ':':
            //0123456789012345
      rtn = 0b0000000000110000; break;
    case ';':
            //0123456789012345
      rtn = 0b0000000000010100; break;
    case ',':
            //0123456789012345
      rtn = 0b0000000000000100; break;
    case '<':
            //0123456789012345
      rtn = 0b0000000001001010; break;
    case '>':
            //0123456789012345
      rtn = 0b0000000010000101; break;
    case '=':
            //0123456789012345
      rtn = 0b0000110000000011; break;
    case '?':
            //0123456789012345
      rtn = 0b1110000000100001; break;
    case '\\':
            //0123456789012345
      rtn = 0b0000000011000000; break;
    case '[':
            //0123456789012345
      rtn = 0b1000011100000000; break;
    case ']':
            //0123456789012345
      rtn = 0b0111100000000000; break;
    case '_':
            //0123456789012345
      rtn = 0b0000110000000000; break;
    case '`':
            //0123456789012345
      rtn = 0b0000000010000000; break;
    case '{':
            //0123456789012345
      rtn = 0b0100100000110010; break;
    case '}':
            //0123456789012345
      rtn = 0b1000010000110001; break;
    case '#':
            //0123456789012345
      rtn = 0b1111111100110011; break;
  }
  return rtn;
}

